#!/usr/bin/env node

/**
 * Module dependencies.
 */

var server = require('../app');
var mtd = require('../../lib/');
var config = mtd.config;

/**
 * Get port from environment and store in Express.
 */
server.set('env', config.env);

/**
 * Create HTTP httpServer.
 */

var httpServer;
var port = normalizePort(config.port);
if (config.myConfig.enableSsl) {
	console.log("SSL mode enabled");
	var fs = require('fs');
	var options = {
		key: fs.readFileSync(__dirname + '/../../config/privkey.pem'),
		cert: fs.readFileSync(__dirname + '/../../config/cert.pem'),
		ca: fs.readFileSync(__dirname + '/../../config/chain.pem')
	};

	httpServer = require('https').Server(options, server);
} else {
	console.log("Non SSL mode enabled");
	httpServer = require('http').Server(server);
}

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP httpServer "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.time().error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.time().error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP httpServer "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind + ", root folder " + config.startupFolder);
}
